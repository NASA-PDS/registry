# Copyright © 2022, California Institute of Technology ("Caltech").
# U.S. Government sponsorship acknowledged.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# • Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# • Redistributions must reproduce the above copyright notice, this list of
#   conditions and the following disclaimer in the documentation and/or other
#   materials provided with the distribution.
# • Neither the name of Caltech nor its operating division, the Jet Propulsion
#   Laboratory, nor the names of its contributors may be used to endorse or
#   promote products derived from this software without specific prior written
#   permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

version: "3.9"

services:

  # Executes the Registry Loader component, which contains Harvest and Registry Manager
  registry-loader:
    profiles: ["pds-batch-loader"]
    image: ${REG_LOADER_IMAGE}
    environment:
      - ES_URL=${ES_URL}
    volumes:
      - ${HARVEST_JOB_CONFIG_FILE}:/cfg/harvest-config.xml
      - ${HARVEST_DATA_DIR}:${CONTAINER_HARVEST_DATA_DIR}
      - ./default-config/es-auth.cfg:/etc/es-auth.cfg
    networks:
      - pds

  # Downloads and harvests test data with the Registry loader
  registry-loader-test-init:
    profiles: ["dev-api", "int-registry-batch-loader"]
    image: ${REG_LOADER_IMAGE}
    environment:
      - ES_URL=${ES_URL}
      - RUN_TESTS=true
      - TEST_DATA_URL=${TEST_DATA_URL}
      - TEST_DATA_LIDVID=${TEST_DATA_LIDVID}
    volumes:
      - ${HARVEST_DATA_DIR}:${CONTAINER_HARVEST_DATA_DIR}
      - ./scripts/registry-loader-waits-for-elasticsearch.sh:/usr/local/bin/registry-loader-waits-for-elasticsearch.sh
      - ./default-config/es-auth.cfg:/etc/es-auth.cfg
    networks:
      - pds
    entrypoint: /usr/local/bin/registry-loader-waits-for-elasticsearch.sh

  # Runs provenance script
  registry-sweepers:
    profiles: ["dev-api", "int-registry-batch-loader"]
    image: ${REG_SWEEPERS_IMAGE}
    environment:
      - PROV_ENDPOINT=${ES_URL}
      - PROV_CREDENTIALS=${PROV_CREDENTIALS}
    networks:
      - pds
    depends_on:
      registry-loader-test-init:
        condition: service_completed_successfully




  # Starts Elasticsearch
  elasticsearch:
    profiles: ["dev-api", "dev-loader", "pds-core-registry", "int-registry-batch-loader", "int-registry-service-loader"]
    image: ${ES_IMAGE}
    environment:
      - discovery.type=${ES_DISCOVERY_TYPE}
    # Uncomment the following environment variable to use OpenSearch without security
    # - plugins.security.disabled=true
    volumes:
      - ./certs/node1.pem:/usr/share/opensearch/config/esnode.pem
      - ./certs/node1-key.pem:/usr/share/opensearch/config/esnode-key.pem
      - ./certs/root-ca.pem:/usr/share/opensearch/config/root-ca.pem
      - ./default-config/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
    ports:
      - "9200:9200"
      - "9600:9600" # required for Performance Analyzer
    networks:
      - pds

  # Initializes Elasticsearch by creating registry and data dictionary indices by utilizing the Registry Loader
  elasticsearch-init:
    profiles: ["dev-api", "pds-core-registry", "int-registry-batch-loader", "int-registry-service-loader"]
    image: ${REG_LOADER_IMAGE}
    environment:
      - ES_URL=${ES_URL}
    volumes:
      - ./scripts/elasticsearch-init.sh:/usr/local/bin/elasticsearch-init.sh
      - ./default-config/es-auth.cfg:/etc/es-auth.cfg
    networks:
      - pds
    entrypoint: ["bash", "/usr/local/bin/elasticsearch-init.sh"]

  # Starts RabbitMQ
  rabbit-mq:
    profiles: ["dev-loader", "int-registry-service-loader", "pds-loader-services"]
    image: rabbitmq:3.9-management
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ./default-config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./default-config/rabbitmq-definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - pds

  # Starts the Registry API
  registry-api:
    profiles: ["dev-loader", "pds-core-registry", "int-registry-batch-loader", "int-registry-service-loader"]
    image: ${REG_API_IMAGE}
    environment:
      - ES_URL=${ES_URL}
    ports:
      - "8080:8080"
    volumes:
      # make volume match how the spring-boot plugin deploys in docker 
      - ${REG_API_APP_PROPERTIES_FILE}:/workspace/BOOT-INF/classes/application.properties
      - ./scripts/registry-api-waits-for-elasticsearch.sh:/usr/local/registry-api-service/registry-api-waits-for-elasticsearch.sh
    networks:
      - pds
    command: /usr/local/registry-api-service/registry-api-waits-for-elasticsearch.sh

  # Starts the Registry Harvest Service
  registry-harvest-service:
    profiles: ["int-registry-service-loader", "pds-loader-services"]
    image: ${REGISTRY_HARVEST_SERVICE_IMAGE}
    environment:
      - ES_URL=${ES_URL}
    ports:
      - "8005:8005"
    volumes:
      - ${HARVEST_SERVER_CONFIG_FILE}:/cfg/harvest-server.cfg
      - ${HARVEST_DATA_DIR}:${CONTAINER_HARVEST_DATA_DIR}
      - ./default-config/es-auth.cfg:/etc/es-auth.cfg
    networks:
      - pds

  # Starts the Registry Crawler Service
  registry-crawler-service:
    profiles: ["int-registry-service-loader", "pds-loader-services"]
    image: ${REGISTRY_CRAWLER_SERVICE_IMAGE}
    ports:
      - "8001:8001"
    volumes:
      - $CRAWLER_SERVER_CONFIG_FILE:/cfg/crawler-server.cfg
      - ${HARVEST_DATA_DIR}:${CONTAINER_HARVEST_DATA_DIR}
    networks:
      - pds

  # Executes the Registry Harvest CLI
  registry-harvest-cli:
    profiles: ["pds-service-loader"]
    image: ${REGISTRY_HARVEST_CLI_IMAGE}
    volumes:
      - ${HARVEST_JOB_CONFIG_FILE}:/cfg/harvest-job-config.xml
      - ${HARVEST_DATA_DIR}:${CONTAINER_HARVEST_DATA_DIR}
      - ${HARVEST_CLIENT_CONFIG_FILE}:/cfg/harvest-client.cfg
    networks:
      - pds

  # Executes the Registry Harvest CLI with test data
  registry-harvest-cli-test-init:
    profiles: ["int-registry-service-loader"]
    image: ${REGISTRY_HARVEST_CLI_IMAGE}
    environment:
      - RUN_TESTS=true
      - TEST_DATA_URL=${TEST_DATA_URL}
      - TEST_DATA_LIDVID=${TEST_DATA_LIDVID}
    volumes:
      - ${HARVEST_JOB_CONFIG_FILE}:/cfg/harvest-job-config.xml
      - ${HARVEST_DATA_DIR}:${CONTAINER_HARVEST_DATA_DIR}
      - ${HARVEST_CLIENT_CONFIG_FILE}:/cfg/harvest-client.cfg
    networks:
      - pds

  # Executes an nginx service to expose the PDS4 archive
  registry-web-archive:
    profiles: ["dev-loader", "dev-api", "int-registry-batch-loader", "int-registry-service-loader"]
    image: nginx
    ports:
      - "81:80"
    volumes:
      - ./default-config/registry-nginx.conf:/etc/nginx/conf.d/default.conf
      - ${HARVEST_DATA_DIR}:/usr/share/nginx/html/archive
    networks:
      - pds

  # Executes Registry API integration test as a Postman collection with test data
  reg-api-integration-test:
    profiles: ["int-test"]
    image: ${POSTMAN_NEWMAN_IMAGE}
    environment:
      - REG_API_URL=${REG_API_URL}
    volumes:
      - ${POSTMAN_COLLECTION_FILE}:/postman/postman-collection.json
    networks:
      - pds
    command: "run /postman/postman-collection.json --env-var baseUrl=${REG_API_URL}"

  # Executes Registry API integration tests as a Postman collection and reports the results into JPL TestRail
  testrail-reporting-test:
    profiles: ["testrail-reporting"]
    image: nasapds/newman-with-testrail-reporter
    environment:
      TESTRAIL_DOMAIN: cae-testrail.jpl.nasa.gov/testrail
      TESTRAIL_PROJECTID: 168
      TESTRAIL_SUITEID: 12824
      TESTRAIL_TITLE: Registry API Newman tests via Jenkins
      # Empty values here inherit from the host environment, which must provide these:
      TESTRAIL_USERNAME:
      TESTRAIL_APIKEY:
    volumes:
      - ${POSTMAN_COLLECTION_FILE}:/postman/postman-collection.json
    networks:
      - pds
    command: "run /postman/postman-collection.json --env-var baseUrl=${REG_API_URL} --reporters cli,testrail"

  # Executes Registry API integration test as a Postman collection with test data (after waiting for data to be loaded)
  reg-api-integration-test-with-wait:
    # For deep-archive#138, @nutjob4life writes:
    #    I'm changing this to no profiles, because I'm not sure if it's actually useful to run any
    #    tests at this point. The two profiles `int-registry-batch-loader` and `int-registry-service-loader`
    #    are typically run with `--detach` and so any exit codes they might have to show pass/fail
    #    status of the tests are lost. We can always run the tests with `./int-tests.sh`.
    # profiles: ["int-registry-batch-loader", "int-registry-service-loader"]
    profiles: []
    image: ${POSTMAN_NEWMAN_IMAGE}
    environment:
      - REG_API_URL=${REG_API_URL}
    volumes:
      - ${POSTMAN_COLLECTION_FILE}:/postman/postman-collection.json
      - ./scripts/postman-waits-for-test-data.sh:/usr/local/bin/postman-waits-for-test-data.sh
    networks:
      - pds
    entrypoint: ["sh", "/usr/local/bin/postman-waits-for-test-data.sh"]

  # Starts a web server for TLS termination and encrypted ingress from outside clients
  tls-termination:
    profiles: ["pds-core-registry", "int-registry-batch-loader", "int-registry-service-loader"]
    image: ${PROXYCRYPT_IMAGE}
    environment:
      - PROXY_URL=http://registry-api:8080/
      - PROXY_PATH=/api/search/1/
      - PROXY_PORT=8443
    ports:
      - "8443:443"
    networks:
      - pds


networks:
  pds:
    driver: bridge
    labels:
      org.label-schema.name: Planetary Data System (PDS)
      org.label-schema.description: Internal bridge network for interprocess communication of services for the PDS
