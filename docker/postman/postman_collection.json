{
	"info": {
		"_postman_id": "0b7ad2d8-4160-4102-8c0b-2e2e3aeac4af",
		"name": "Planetary Data System API Reference Tests Copy 14",
		"description": "Federated PDS API which provides actionable end points standardized\nbetween the different nodes.\n\n\nContact Support:\n Email: pds-operator@jpl.nasa.gov",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11337552",
		"_collection_link": "https://interstellar-satellite-406261.postman.co/workspace/My-Workspace~2ee1fece-93c6-4f38-806d-fa321e2e92d5/collection/11337552-0b7ad2d8-4160-4102-8c0b-2e2e3aeac4af?action=share&source=collection_link&creator=11337552"
	},
	"item": [
		{
			"name": "cookbook examples",
			"item": [
				{
					"name": "Latest lidvid for a given lid (no suffix))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488906 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488906 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var product = pm.response.json();",
									"",
									"pm.test(\"C2488906 id is the latest lidvid available\", () => {",
									"    pm.expect(product.id).to.eql(\"urn:nasa:pds:mars2020.spice::3.0\"); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:lid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid"
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Latest lidvid for a given lid (latest suffix)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488906 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488906 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var product = pm.response.json();",
									"",
									"pm.test(\"C2488906 id is the latest lidvid available\", () => {",
									"    pm.expect(product.id).to.eql(\"urn:nasa:pds:mars2020.spice::3.0\"); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:lid/latest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid",
								"latest"
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All lidvid for a given lid (all suffix)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488907 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488907 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488907 3 products are found\", () => {",
									"    pm.expect(data.length).to.equal(3); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:lid/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid",
								"all"
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by processing level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488908 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"C2488908 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488908 Number of results is 10\", () => {",
									"    pm.expect(data.length).to.equal(10); ",
									"});",
									"",
									"pm.test(\"C2488908 processing level is derived\", () => {",
									"    pm.expect(data[0][\"properties\"][\"pds:Primary_Result_Summary.pds:processing_level\"]).to.include(\"Derived\"); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(pds:Primary_Result_Summary.pds:processing_level eq \"Derived\")&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(pds:Primary_Result_Summary.pds:processing_level eq \"Derived\")"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by target",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"C2488910 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"C2488910 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488910 Number of results is 10\", () => {",
									"    pm.expect(data.length).to.equal(10); ",
									"});",
									"",
									"",
									"pm.test(\"C2488910 target is mars\", () => {",
									"    pm.expect(data[0][\"properties\"][\"ref_lid_target\"][0])",
									"    .to.eql(\"urn:nasa:pds:context:target:planet.mars\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(ref_lid_target eq \"urn:nasa:pds:context:target:planet.mars\")&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(ref_lid_target eq \"urn:nasa:pds:context:target:planet.mars\")"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"C2488911 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488911 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"// skip, because of bug https://github.com/NASA-PDS/registry-api/issues/351",
									"/*",
									"pm.test(\"C2488911 3 products are found\", () => {",
									"    pm.expect(data.length).to.equal(3); ",
									"});",
									"*/",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=((pds:Internal_Reference.pds:lid_reference eq \"urn:nasa:pds:context:investigation:mission.mars2020\") or (pds:Internal_Reference.pds:lid_reference like \"urn:nasa:pds:context:investigation:mission.mars2020::*\"))&limit=200",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "((pds:Internal_Reference.pds:lid_reference eq \"urn:nasa:pds:context:investigation:mission.mars2020\") or (pds:Internal_Reference.pds:lid_reference like \"urn:nasa:pds:context:investigation:mission.mars2020::*\"))"
								},
								{
									"key": "limit",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search for collection of an observtional product, kvp response",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488912 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488912 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488912 Has pds:Citation_Information.pds:doi\", () => {",
									"    pm.expect(data[0]).to.have.property('pds:Citation_Information.pds:doi');",
									"});",
									"",
									"pm.test(\"C2488912 Collection DOI is [10.17189/1517568]\", () => {",
									"    pm.expect(data[0][\"pds:Citation_Information.pds:doi\"]).to.equal(\"10.17189/1517568\"); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid/member-of?fields=pds:Citation_Information.pds:doi",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid",
								"member-of"
							],
							"query": [
								{
									"key": "fields",
									"value": "pds:Citation_Information.pds:doi"
								}
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:insight_rad:data_calibrated:hp3_rad_cal_00014_20181211_073042::1.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for a product knowing its DOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2552353 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2552353 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2552353 number of results is 2\", () => {",
									"    pm.expect(data.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"C2488912 product DOI is [10.17189/1517568]\", () => {",
									"    pm.expect(data[0][\"properties\"][\"pds:Citation_Information.pds:doi\"][0]).to.equal(\"10.17189/1517568\"); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?q=(pds:Citation_Information.pds:doi eq \"10.17189/1517568\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(pds:Citation_Information.pds:doi eq \"10.17189/1517568\")"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "requirements",
			"item": [
				{
					"name": "NASA-PDS/registry-api#494 querystring supports EQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"C4440539\";",
									"const minimumExpectedHits = 2; // actual count may increase as data is added to test corpus",
									"function testHitConstraints(hit) {",
									"    pm.expect(hit.properties.product_class[0]).to.eq(\"Product_Bundle\")",
									"};",
									"",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(`${testrailId} Number of results is at least ${minimumExpectedHits}`, () => {",
									"    pm.expect(data.length).gte(minimumExpectedHits); ",
									"});",
									"",
									"pm.test(`${testrailId} Returned hits satisfy constraints`, () => {",
									"    data.forEach(testHitConstraints) ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(product_class eq \"Product_Bundle\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(product_class eq \"Product_Bundle\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#494 querystring supports NE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"C4440540\";",
									"const minimumExpectedHits = 35; // actual count may increase as data is added to test corpus",
									"function testHitConstraints(hit) {",
									"    pm.expect(hit.properties.product_class[0]).to.not.eq(\"Product_Bundle\")",
									"};",
									"",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(`${testrailId} Number of results is at least ${minimumExpectedHits}`, () => {",
									"    pm.expect(data.length).gte(minimumExpectedHits); ",
									"});",
									"",
									"pm.test(`${testrailId} Returned hits satisfy constraints`, () => {",
									"    data.forEach(testHitConstraints) ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(product_class NE \"Product_Bundle\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(product_class NE \"Product_Bundle\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#494 querystring supports GT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"C4440541\";",
									"const minimumExpectedHits = 6; // actual count may increase as data is added to test corpus",
									"function testHitConstraints(hit) {",
									"    pm.expect(Date.parse(hit.properties[\"pds:Time_Coordinates.pds:start_date_time\"][0])).gt(Date.parse(\"2020-07-30T12:51:34Z\"))",
									"};",
									"",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(`${testrailId} Number of results is at least ${minimumExpectedHits}`, () => {",
									"    pm.expect(data.length).gte(minimumExpectedHits); ",
									"});",
									"",
									"pm.test(`${testrailId} Returned hits satisfy constraints`, () => {",
									"    data.forEach(testHitConstraints) ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(pds:Time_Coordinates.pds:start_date_time GT \"2020-07-30T12:51:34Z\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(pds:Time_Coordinates.pds:start_date_time GT \"2020-07-30T12:51:34Z\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#494 querystring supports LT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"C4440542\";",
									"const minimumExpectedHits = 24; // actual count may increase as data is added to test corpus",
									"function testHitConstraints(hit) {",
									"    pm.expect(Date.parse(hit.properties[\"pds:Time_Coordinates.pds:start_date_time\"][0])).lt(Date.parse(\"2020-07-30T12:51:34Z\"))",
									"};",
									"",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(`${testrailId} Number of results is at least ${minimumExpectedHits}`, () => {",
									"    pm.expect(data.length).gte(minimumExpectedHits); ",
									"});",
									"",
									"pm.test(`${testrailId} Returned hits satisfy constraints`, () => {",
									"    data.forEach(testHitConstraints) ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(pds:Time_Coordinates.pds:start_date_time LT \"2020-07-30T12:51:34Z\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(pds:Time_Coordinates.pds:start_date_time LT \"2020-07-30T12:51:34Z\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#494 querystring supports GE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"C4440543\";",
									"const minimumExpectedHits = 13; // actual count may increase as data is added to test corpus",
									"function testHitConstraints(hit) {",
									"    pm.expect(Date.parse(hit.properties[\"pds:Time_Coordinates.pds:start_date_time\"][0])).gte(Date.parse(\"2020-07-30T12:51:34Z\"))",
									"};",
									"",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(`${testrailId} Number of results is at least ${minimumExpectedHits}`, () => {",
									"    pm.expect(data.length).gte(minimumExpectedHits); ",
									"});",
									"",
									"pm.test(`${testrailId} Returned hits satisfy constraints`, () => {",
									"    data.forEach(testHitConstraints) ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(pds:Time_Coordinates.pds:start_date_time GE \"2020-07-30T12:51:34Z\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(pds:Time_Coordinates.pds:start_date_time GE \"2020-07-30T12:51:34Z\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#494 querystring supports LE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"C4440544\";",
									"const minimumExpectedHits = 31; // actual count may increase as data is added to test corpus",
									"function testHitConstraints(hit) {",
									"    pm.expect(Date.parse(hit.properties[\"pds:Time_Coordinates.pds:start_date_time\"][0])).lte(Date.parse(\"2020-07-30T12:51:34Z\"))",
									"};",
									"",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(`${testrailId} Number of results is at least ${minimumExpectedHits}`, () => {",
									"    pm.expect(data.length).gte(minimumExpectedHits); ",
									"});",
									"",
									"pm.test(`${testrailId} Returned hits satisfy constraints`, () => {",
									"    data.forEach(testHitConstraints) ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(pds:Time_Coordinates.pds:start_date_time LE \"2020-07-30T12:51:34Z\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(pds:Time_Coordinates.pds:start_date_time LE \"2020-07-30T12:51:34Z\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#495 querystring supports AND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4440388 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C4440388 Number of results is 1\", () => {",
									"    pm.expect(data.length).to.equal(1); ",
									"});",
									"",
									"pm.test(\"C4440388 Returned hits contain correct values\", () => {",
									"    pm.expect(data[0][\"properties\"][\"product_class\"][0]).to.eql(\"Product_Bundle\");",
									"    pm.expect(data[0][\"properties\"][\"lid\"][0]).to.eql(\"urn:nasa:pds:mars2020.spice\"); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=((product_class EQ \"Product_Bundle\") AND (lid EQ \"urn:nasa:pds:mars2020.spice\"))",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "((product_class EQ \"Product_Bundle\") AND (lid EQ \"urn:nasa:pds:mars2020.spice\"))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#495 querystring supports OR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4440389 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C4440389 Number of results is 2\", () => {",
									"    pm.expect(data.length).to.equal(2); ",
									"});",
									"",
									"const acceptableLids = [",
									"    \"urn:nasa:pds:mars2020.spice\",",
									"    \"urn:nasa:pds:insight_rad\"",
									"]",
									"",
									"pm.test(\"C4440389 Returned hits contain correct values\", () => {",
									"    data.forEach(hit => {",
									"        pm.expect(hit[\"properties\"][\"product_class\"][0]).to.eql(\"Product_Bundle\");",
									"    pm.expect(acceptableLids).to.include(hit[\"properties\"][\"lid\"][0]);",
									"    })",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=((product_class EQ \"Product_Bundle\") AND ((lid EQ \"urn:nasa:pds:mars2020.spice\") OR (lid EQ \"urn:nasa:pds:insight_rad\")))",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "((product_class EQ \"Product_Bundle\") AND ((lid EQ \"urn:nasa:pds:mars2020.spice\") OR (lid EQ \"urn:nasa:pds:insight_rad\")))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#495 querystring supports NOT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4440390 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C4440390 Number of results is 1\", () => {",
									"    pm.expect(data.length).to.equal(1); ",
									"});",
									"",
									"pm.test(\"C4440390 Returned hits contain correct values\", () => {",
									"    pm.expect(data[0][\"properties\"][\"product_class\"][0]).to.eql(\"Product_Bundle\");",
									"    pm.expect(data[0][\"properties\"][\"lid\"][0]).to.eql(\"urn:nasa:pds:insight_rad\"); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=((product_class EQ \"Product_Bundle\") AND NOT (lid EQ \"urn:nasa:pds:mars2020.spice\"))",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "((product_class EQ \"Product_Bundle\") AND NOT (lid EQ \"urn:nasa:pds:mars2020.spice\"))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#493 querystring supports NOT on other endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4443889 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C4443889 Number of results is 1\", () => {",
									"    pm.expect(data.length).to.equal(1); ",
									"});",
									"",
									"pm.test(\"C4443889 Returned hits contain correct values\", () => {",
									"    pm.expect(data[0][\"properties\"][\"product_class\"][0]).to.eql(\"Product_Bundle\");",
									"    pm.expect(data[0][\"properties\"][\"lid\"][0]).to.eql(\"urn:nasa:pds:insight_rad\"); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/classes/bundle?q=((product_class EQ \"Product_Bundle\") AND NOT (lid EQ \"urn:nasa:pds:mars2020.spice\"))",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"classes",
								"bundle"
							],
							"query": [
								{
									"key": "q",
									"value": "((product_class EQ \"Product_Bundle\") AND NOT (lid EQ \"urn:nasa:pds:mars2020.spice\"))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#495 querystring supports lowercase operators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4440391 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C4440391 Number of results is 1\", () => {",
									"    pm.expect(data.length).to.equal(1); ",
									"});",
									"",
									"pm.test(\"C4440391 Returned hits contain correct values\", () => {",
									"    pm.expect(data[0][\"properties\"][\"product_class\"][0]).to.eql(\"Product_Bundle\");",
									"    pm.expect(data[0][\"properties\"][\"lid\"][0]).to.eql(\"urn:nasa:pds:insight_rad\"); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=((product_class eq \"Product_Bundle\") and not (lid eq \"urn:nasa:pds:mars2020.spice\"))",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "((product_class eq \"Product_Bundle\") and not (lid eq \"urn:nasa:pds:mars2020.spice\"))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/pds-api#72 search by a temporal range as an ISO-8601 time interval",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488851 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488851 Number of results is 1\", () => {",
									"    pm.expect(data.length).to.equal(1); ",
									"});",
									"",
									"pm.test(\"C2488851 time found in range\", () => {",
									"    pm.expect(data[0].start_date_time).to.eql(\"2021-03-03T01:36:46.542Z\"); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=((pds:Time_Coordinates.pds:start_date_time gt \"2021-03-03T01:36:00.000Z\") and (pds:Time_Coordinates.pds:start_date_time lt \"2021-03-03T02:36:46.542Z\"))",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "q",
									"value": "((pds:Time_Coordinates.pds:start_date_time gt \"2021-03-03T01:36:00.000Z\") and (pds:Time_Coordinates.pds:start_date_time lt \"2021-03-03T02:36:46.542Z\"))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/pds-api#99 free text search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488859 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488859 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"// Does not work until keyword search is implemented again",
									"// pm.test(\"C2488859 Number of results is 2\", () => {",
									"//     pm.expect(data.length).to.equal(2); ",
									"// });",
									"",
									"// pm.test(\"C2488859 title contains Perseverance\", () => {",
									"//     pm.expect(data[0].title).to.match(/Perseverance/); ",
									"// });",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?keywords=Perseverance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "keywords",
									"value": "Perseverance"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#80 select fields in response for lid/lidvid resolution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488846 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"pm.test(\"C2488846 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488846 Has lid\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('lid');",
									"});",
									"",
									"pm.test(\"C2488846 Has pds:File.pds:file_size\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('pds:File.pds:file_size');",
									"});",
									"",
									"pm.test(\"C2488846 Has not ref_lid_instrument\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.not.have.property('ref_lid_instrument');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid?fields=lid,pds:File.pds:file_size",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"query": [
								{
									"key": "fields",
									"value": "lid,pds:File.pds:file_size"
								}
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:mars2020.spice::1.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry#153 all properties are searchable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488821 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488821 Number of results is 1\", () => {",
									"    pm.expect(data.length).to.equal(1); ",
									"});",
									"",
									"pm.test(\"C2488821 checksum value is 5c955dae449823ffc9e3e1eba1c474de\", () => {",
									"    pm.expect(data[0][\"properties\"][\"ops:Label_File_Info.ops:md5_checksum\"][0]).to.eql(\"5c955dae449823ffc9e3e1eba1c474de\"); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(ops:Label_File_Info.ops:md5_checksum eq \"5c955dae449823ffc9e3e1eba1c474de\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(ops:Label_File_Info.ops:md5_checksum eq \"5c955dae449823ffc9e3e1eba1c474de\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#349 Request for json+pds4 response fails in production",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.execution.skipRequest();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.nasa.pds.pds4+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#336 As a PDS operator, I want to know the health of the registry API service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api/352 pagination step 1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sort=ops:Harvest_Info.ops:harvest_date_time&limit=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api/352 pagination step 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sort=ops:Harvest_Info.ops:harvest_date_time&limit=2&search-after=2024-01-23T22:53:30.402453Z",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time"
								},
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "search-after",
									"value": "2024-01-23T22:53:30.402453Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api/352 members pagination step 1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:insight_rad:data_calibrated::7.0/members?sort=ops:Harvest_Info.ops:harvest_date_time&limit=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:insight_rad:data_calibrated::7.0",
								"members"
							],
							"query": [
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api/352 members pagination step 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:insight_rad:data_calibrated::7.0/members?sort=ops:Harvest_Info.ops:harvest_date_time&limit=2&search-after=2024-01-23T22:53:30.402453Z",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:insight_rad:data_calibrated::7.0",
								"members"
							],
							"query": [
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time"
								},
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "search-after",
									"value": "2024-01-23T22:53:30.402453Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#434 get product from lidvid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4326843 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C4326843 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020::3.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#434 get product from lidvid not supported Accept",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4326843 Status code is 406\", () => {",
									"  pm.response.to.have.status(406);",
									"});",
									"",
									"pm.test(\"C4326843 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/not+supported",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020::3.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#434 get product from lidvid missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4326843 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C4326843 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"C4326843 Description match the requested lidvid\", () => {",
									"  pm.expect(data.id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020::3.0\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020::3.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#435 get latest product from lid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4328804 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C4328804 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"C4328804 Description match the requested lidvid\", () => {",
									"  pm.expect(data.id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020::3.0\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid"
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#435 get latest product from lid with explicit latest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4328804 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C4328804 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"C4328804 Description match the requested lidvid\", () => {",
									"  pm.expect(data.id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020::3.0\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lid/latest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid",
								"latest"
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#436 get all product for a given lid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4332661 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C4332661 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"C4332661 Description match the requested lid\", () => {",
									"  pm.expect(data.data[0].id).to.include(\"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020\");",
									"});",
									"",
									"pm.test(\"C4332661 Multiple products are returned\", () => {",
									"  pm.expect(data.data.length).to.eql(3);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lid/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid",
								"all"
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#436 get all product for a given lid with pagination, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4332661 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C4332661 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"C4332661 Description match the requested lid\", () => {",
									"  pm.expect(data.data[0].id).to.include(\"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020\");",
									"});",
									"",
									"pm.test(\"C4332661 Page 1 returns 2 results\", () => {",
									"  pm.expect(data.data.length).to.eql(2);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lid/all?limit=2&sort=ops:Harvest_Info.ops:harvest_date_time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time"
								}
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#436 get all product for a given lid with pagination, page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4332661 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C4332661 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"C4332661 Description match the requested lid\", () => {",
									"  pm.expect(data.data[0].id).to.include(\"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020\");",
									"});",
									"",
									"pm.test(\"C4332661 only 1 product is returned in last page\", () => {",
									"  pm.expect(data.data.length).to.eql(1);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lid/all?limit=2&sort=vid&search-after=2.0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "sort",
									"value": "vid"
								},
								{
									"key": "search-after",
									"value": "2.0"
								}
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#436 get all product for a given lid with pagination, page 2 missing sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4332661 Status code is 400\", () => {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"C4332661 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lid/all?limit=2&search-after=2024-04-30T19:15:08.324465Z",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time",
									"disabled": true
								},
								{
									"key": "search-after",
									"value": "2024-04-30T19:15:08.324465Z"
								}
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#469 q param simple criteria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4332661 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C4332661 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time",
									"disabled": true
								},
								{
									"key": "search-after",
									"value": "2024-04-30T19:15:08.324465Z",
									"disabled": true
								},
								{
									"key": "q",
									"value": "pds:Time_Coordinates.pds:stop_date_time eq \"3000-01-01T00:00:00.000Z\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api/issues/66 invalid q string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4332661 Status code is 400\", () => {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"C4332661 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?q=ops:Data_File_Info.ops:file_size gte 138172",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time",
									"disabled": true
								},
								{
									"key": "search-after",
									"value": "2024-04-30T19:15:08.324465Z",
									"disabled": true
								},
								{
									"key": "q",
									"value": "ops:Data_File_Info.ops:file_size gte 138172"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#457 q param like operator with wildcard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4332661 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C4332661 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?q=lid  like \"urn:nasa:pds:insight_*\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time",
									"disabled": true
								},
								{
									"key": "search-after",
									"value": "2024-04-30T19:15:08.324465Z",
									"disabled": true
								},
								{
									"key": "q",
									"value": "lid  like \"urn:nasa:pds:insight_*\""
								},
								{
									"key": "fields",
									"value": "lid",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#469 q param criteria combination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4332661 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C4332661 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?limit=2&sort=ops:Harvest_Info.ops:harvest_date_time&search-after=2024-04-30T19:15:08.324465Z&q=( ( ops:Label_File_Info.ops:file_size ge 6805 and lid eq \"urn:nasa:pds:insight_rad\" ) or  ops:Label_File_Info.ops:file_ref eq   \"http://localhost:81/archive/custom-datasets/naif3/bundle_mars2020_spice_v001.xml\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time"
								},
								{
									"key": "search-after",
									"value": "2024-04-30T19:15:08.324465Z"
								},
								{
									"key": "q",
									"value": "( ( ops:Label_File_Info.ops:file_size ge 6805 and lid eq \"urn:nasa:pds:insight_rad\" ) or  ops:Label_File_Info.ops:file_ref eq   \"http://localhost:81/archive/custom-datasets/naif3/bundle_mars2020_spice_v001.xml\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#223 products/{id}/members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438463 Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"pm.test(\"C4438463 Correct hits returned\", () => {pm.expect(content.summary.hits).to.eql(1)});",
									"pm.test(\"C4438463 Correct data returned\", () => {pm.expect(content.data[0].id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels::3.0\")});",
									"",
									"pm.test(\"C4443905 Data match the q param\", () => {pm.expect(content.data[0]['properties'][\"pds:Collection.pds:collection_type\"][0]).to.eql(\"SPICE Kernel\")});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice/members?q=pds:Collection.pds:collection_type eq \"SPICE Kernel\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice",
								"members"
							],
							"query": [
								{
									"key": "q",
									"value": "pds:Collection.pds:collection_type eq \"SPICE Kernel\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#484 products/{id}/members default to latest-only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438479 Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"const relevantHits = content.data.filter(hit => hit.properties.lid[0] === \"urn:nasa:pds:mars2020.spice:spice_kernels\")",
									"pm.test(\"C4438479 Correct hits returned\", () => { pm.expect(relevantHits.length).to.eql(1) });",
									"pm.test(\"C4438479 Correct data returned\", () => {pm.expect(relevantHits[0].id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels::3.0\")});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#453 products/{id}/members/members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438464 Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"pm.test(\"C4438464 Correct hits returned\", () => {pm.expect(content.summary.hits).to.eql(5)});",
									"",
									"pm.test(\"C4443902 data match q param\", () => {pm.expect(content.data[0][\"properties\"][\"pds:Time_Coordinates.pds:start_date_time\"][0]).to.eql(\"2020-07-30T12:51:34Z\")});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice/members/members?q=pds:Time_Coordinates.pds:start_date_time eq \"2020-07-30T12:51:34Z\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice",
								"members",
								"members"
							],
							"query": [
								{
									"key": "q",
									"value": "pds:Time_Coordinates.pds:start_date_time eq \"2020-07-30T12:51:34Z\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#485 products/{id}/members/members default to latest-only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438481 Status code is 200\", () => { pm.response.to.have.status(200) });",
									"const content = pm.response.json();",
									"const relevantHits = content.data.filter(hit => hit.properties.lid[0] === \"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020\")",
									"pm.test(\"C4438481 Correct hits returned\", () => { pm.expect(relevantHits.length).to.eql(1) });",
									"pm.test(\"C4438481 Correct data returned\", () => {pm.expect(relevantHits[0].id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020::3.0\")});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice/members/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice",
								"members",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#451/452 products/{id}/member-of",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438465 Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"pm.test(\"C4438465 Correct hits returned\", () => {pm.expect(content.summary.hits).to.eql(1)});",
									"pm.test(\"C4438465 Correct data returned\", () => {pm.expect(content.data[0].id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels::3.0\")});",
									"pm.test(\"C4443891 data match q param\", () => {pm.expect(content.data[0][\"properties\"][\"pds:Time_Coordinates.pds:start_date_time\"][0]).to.eql(\"2020-07-30T12:51:34Z\")});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020/member-of?q=pds:Time_Coordinates.pds:start_date_time eq \"2020-07-30T12:51:34Z\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020",
								"member-of"
							],
							"query": [
								{
									"key": "q",
									"value": "pds:Time_Coordinates.pds:start_date_time eq \"2020-07-30T12:51:34Z\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#451/486 products/{id}/member-of default to latest-only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438482 Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"const relevantHits = content.data.filter(hit => hit.properties.lid[0] === \"urn:nasa:pds:mars2020.spice:spice_kernels\")",
									"pm.test(\"C4438482 Correct hits returned\", () => { pm.expect(relevantHits.length).to.eql(1) });",
									"pm.test(\"C4438482 Correct data returned\", () => {pm.expect(relevantHits[0].id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels::3.0\")});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020/member-of",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020",
								"member-of"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#454 products/{id}/member-of/member-of",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438466 Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"pm.test(\"C4438466 Correct hits returned\", () => {pm.expect(content.summary.hits).to.eql(1)});",
									"pm.test(\"C4438466 Correct data returned\", () => {pm.expect(content.data[0].id).to.eql(\"urn:nasa:pds:mars2020.spice::3.0\")});",
									"",
									"pm.test(\"C4443890 Correct data returned according to q param\", () => {pm.expect(content.data[0][\"properties\"][\"pds:Time_Coordinates.pds:start_date_time\"][0]).to.eql(\"2020-07-30T12:51:34Z\")});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020/member-of/member-of?q=pds:Time_Coordinates.pds:start_date_time eq \"2020-07-30T12:51:34Z\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020",
								"member-of",
								"member-of"
							],
							"query": [
								{
									"key": "q",
									"value": "pds:Time_Coordinates.pds:start_date_time eq \"2020-07-30T12:51:34Z\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#487 products/{id}/member-of/member-of default to latest-only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438483 Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"const relevantHits = content.data.filter(hit => hit.properties.lid[0] === \"urn:nasa:pds:mars2020.spice\")",
									"pm.test(\"C4438483 Correct hits returned\", () => { pm.expect(relevantHits.length).to.eql(1) });",
									"pm.test(\"C4438483 Correct data returned\", () => {pm.expect(relevantHits[0].id).to.eql(\"urn:nasa:pds:mars2020.spice::3.0\")});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020/member-of/member-of",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice:spice_kernels:mk_m2020",
								"member-of",
								"member-of"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#497 application/json multi product result does not contain blobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438480 json blob is not in the JSON summary response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.properties).not.to.contain(\"ops:Label_File_Info.ops:json_blob\");",
									"});",
									"",
									"pm.test(\"C4438480 xml blob is not in the JSON summary response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.properties).not.to.contain(\"ops:Label_File_Info.ops:blob\");",
									"});",
									"",
									"pm.test(\"C4438480 json blob is not in the JSON data response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].properties[\"ops:Label_File_Info.ops:json_blob\"]).to.be.undefined;",
									"});",
									"",
									"pm.test(\"C4438480 xml blob is not in the JSON data response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].properties[\"ops:Label_File_Info.ops:blob\"]).to.be.undefined;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?limit=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#497 application/json single product result does not contain blobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438480 json blob is not in the data response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.properties[\"ops:Label_File_Info.ops:json_blob\"]).to.be.undefined;",
									"});",
									"",
									"pm.test(\"C4438480 xml blob is not in the data response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.properties[\"ops:Label_File_Info.ops:blob\"]).to.be.undefined;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:insight_rad::2.1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#497 application/kvp+json multi-product result does not contain blobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C4438480 json blob is not in the KVP summary response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.properties).not.to.contain(\"ops:Label_File_Info.ops:json_blob\");",
									"});",
									"",
									"pm.test(\"C4438480 xml blob is not in the KVP summary response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.properties).not.to.contain(\"ops:Label_File_Info.ops:blob\");",
									"});",
									"",
									"",
									"pm.test(\"C4438480 json blob is not in the KVP data response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0][\"ops:Label_File_Info.ops:json_blob\"]).to.be.undefined;",
									"});",
									"",
									"pm.test(\"C4438480 xml blob is not in the KVP data response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0][\"ops:Label_File_Info.ops:blob\"]).to.be.undefined;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?limit=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#497 application/kvp+json single product result does not contain blobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"C4438480 json blob is not in the KVP data response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"ops:Label_File_Info.ops:json_blob\"]).to.be.undefined;",
									"});",
									"",
									"pm.test(\"C4438480 xml blob is not in the KVP data response\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"ops:Label_File_Info.ops:blob\"]).to.be.undefined;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:insight_rad::2.1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#497 application/xml single product result does not contain blobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:insight_rad::2.1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#497 application/xml multi-product result does not contain blobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?limit=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#516 Welcome page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"C4439829 Welcome page, base URL returns documentation\", () => {",
									"    var response = pm.response.text();",
									"    pm.expect(response).to.contain('<div id=\"swagger-ui\"></div>');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}",
							"host": [
								"{{baseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#439 I get application/json results from my browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"C4446492\";",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"   pm.response.to.have.header(\"Content-Type\");",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#440 get pds4+xml results on multiple products responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"ToBeUpdated\";",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is text/xml\", function () {",
									"   pm.response.to.have.header(\"Content-Type\");",
									"   pm.response.to.be.header(\"Content-Type\", \"text/xml\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.nasa.pds.pds4+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?limit=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#440 get pds4+xml results on single product responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"ToBeUpdated\";",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is text/xml\", function () {",
									"   pm.response.to.have.header(\"Content-Type\");",
									"   pm.response.to.be.header(\"Content-Type\", \"text/xml\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.nasa.pds.pds4+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:insight_rad:data_calibrated:hp3_rad_cal_00390_20200101_120222::1.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#450 get pds4+json results on multiple products responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"ToBeUpdated\";",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"   pm.response.to.have.header(\"Content-Type\");",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.nasa.pds.pds4+json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?limit=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#440 get pds4+json results on single product responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"ToBeUpdated\";",
									"pm.test(`${testrailId} Status code is 200`, () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"   pm.response.to.have.header(\"Content-Type\");",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.nasa.pds.pds4+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:insight_rad:data_calibrated:hp3_rad_cal_00390_20200101_120222::1.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#459 return requested fields only text/csv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"const testrailId = \"ToBeDefined\"",
									"const content = pm.response.text();",
									"const parsedBody = content.split('\\n');",
									"",
									"pm.test(\"${testrailId} Only lid is in the reponse\", function () {",
									"    pm.expect(parsedBody[0]).to.equal('lid');",
									"}",
									")",
									"",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid?fields=lid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"query": [
								{
									"key": "fields",
									"value": "lid"
								}
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:insight_rad::2.1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#459 return requested fields only application/kvp+json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"const testrailId = \"ToBeDefined\"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"${testrailId} Only lid is in the reponse\", () => {",
									"    pm.expect(data).to.have.property('lid'); ",
									"    pm.expect(data).not.to.have.property('lidvid'); ",
									"});",
									"",
									"",
									"",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid?fields=lid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"query": [
								{
									"key": "fields",
									"value": "lid"
								}
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:insight_rad::2.1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#459 return requested fields only application/json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"const testrailId = \"ToBeDefined\"",
									"var data = pm.response.json();",
									"",
									"pm.test(\"${testrailId} Only lid is in the reponse\", () => {",
									"    pm.expect(data[\"properties\"]).to.have.property('lid'); ",
									"    pm.expect(data[\"properties\"]).not.to.have.property('lidvid'); ",
									"});",
									"",
									"",
									"",
									"",
									"",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid?fields=lid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"query": [
								{
									"key": "fields",
									"value": "lid"
								}
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:insight_rad::2.1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#283 facets on terms",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?facet-fields=product_class,vid&facet-limit=20&limit=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "facet-fields",
									"value": "product_class,vid"
								},
								{
									"key": "facet-limit",
									"value": "20"
								},
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "other tickets",
			"item": [
				{
					"name": "NASA-PDS/registry-api#277 /properties endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488844 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488844 Response takes less than 100ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"pm.test(\"C2488844 Response contains same number of properties\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.length).to.be.eql(146);",
									"});",
									"",
									"pm.test(\"C2488844 Response property objects follow expected schema\", () => {",
									"    const responseJson = pm.response.json();",
									"    const expectedKeys = new Set([\"property\", \"type\"]);",
									"    for (const propertyObj of responseJson) {",
									"        const keys = new Set(Object.keys(propertyObj));",
									"        pm.expect(Array.from(keys).every(key => expectedKeys.has(key)) && Array.from(expectedKeys).every(key => keys.has(key))).true;",
									"    }",
									"});",
									"",
									"// Some additional tests may be warranted in future based on presence of particular keys, key formats, or types."
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#326 list product classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488845 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488845 Returns correct values\", () => {",
									"    const responseJson = pm.response.json();",
									"    const values = new Set(responseJson);",
									"    const expectedValues = new Set([\"aip\",\"ancillary\",\"attribute-definition\",\"browse\",\"bundle\",\"class-definition\",\"collection\",\"context\",\"dip\",\"dip-deep-archive\",\"data-set-pds3\",\"document\",\"external\",\"file-repository\",\"file-text\",\"instrument-host-pds3\",\"instrument-pds3\",\"metadata-supplemental\",\"mission-pds3\",\"native\",\"observational\",\"proxy-pds3\",\"sip\",\"sip-deep-archive\",\"spice-kernel\",\"service\",\"software\",\"subscription-pds3\",\"target-pds3\",\"thumbnail\",\"update\",\"volume-pds3\",\"volume-set-pds3\",\"xml-schema\",\"zipped\"]);",
									"    pm.expect(Array.from(values).every(val => expectedValues.has(val)) && Array.from(expectedValues).every(val => values.has(val))).true;",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/jso",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/classes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"classes"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#375 csv response, use | as inner list separator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2723037 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2723037 Response takes less than 100ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var resp = pm.response.json();",
									"",
									"pm.test(\"C2723037 file size value doesn't have brackets\", () => {",
									"    pm.expect(resp[\"pds:File.pds:file_size\"]).to.equal(\"1365\"); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid?fields=lid,pds:File.pds:file_size",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"query": [
								{
									"key": "fields",
									"value": "lid,pds:File.pds:file_size"
								}
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:mars2020.spice::1.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#296 API crashes with JVM memory error on data sets with very large labels (>1MB)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const numOfRequests = 20",
									"",
									"for (let i = 0; i < numOfRequests; i++) {",
									"    let query = i + 1",
									"    pm.test(\"Query \" + query + \": status code is 200\", () => {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=lidvid%20like%20%22urn:nasa:pds:mars2020_sherloc*%22",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "lidvid%20like%20%22urn:nasa:pds:mars2020_sherloc*%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#356 Accept:* response not defaulting to valid application/json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type should be 'application/json'\", () => {",
									"    let expectedContentType = \"application/json\";",
									"    let actualContentType = pm.response.headers.get(\"Content-Type\");",
									"    pm.expect(actualContentType).to.include(expectedContentType);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice::1.0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice::1.0"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#262 the request url in the error message does not make sense",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/classes//collections?q=\"\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"classes",
								"",
								"collections"
							],
							"query": [
								{
									"key": "q",
									"value": "\"\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#341 members of a bundle does not work on new test dataset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice::3.0/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice::3.0",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#355 api does not return information that OpenSearch says is public",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#343 API falsely reports 10000 hits for hits>10000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Hits are less than 10,000\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.hits).to.be.below(10000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?limit=100&q=product_class%20eq%20\"Product_Observational\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "q",
									"value": "product_class%20eq%20\"Product_Observational\""
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api/#638 a query without Accept header returns Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const testrailId = \"ToBeUpdated\";",
									"pm.test(\"${testrailId} Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"${testrailId} Content-Type is application/json\", function () {",
									"   pm.response.to.have.header(\"Content-Type\");",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "opensearch requests",
			"item": [
				{
					"name": "legacy_registry",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script: Wait until OpenSearch index \"en-legacy-registry\" has data",
									"",
									"const INDEX_URL = pm.environment.get(\"opensearchUrl\") + \"/en-legacy-registry/_search\";",
									"const MAX_RETRIES = 20;     // how many times to check",
									"const RETRY_INTERVAL = 30000; // milliseconds between checks (30 seconds)",
									"",
									"function waitForData(retriesLeft) {",
									"    pm.sendRequest({",
									"        url: INDEX_URL,",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"        auth: {",
									"            type: \"basic\",",
									"            basic: {",
									"                username: 'admin', // TODO get it from the environment",
									"                password: 'admin' // TODO same here",
									"            }     ",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                size: 0, // we only need total count",
									"                query: { match_all: {} }",
									"            })",
									"        }",
									"    }, function (err, res) {",
									"        if (err) {",
									"            console.log(\"Error checking index:\", err);",
									"            if (retriesLeft > 0) {",
									"            console.log(`⏳ Waiting for data... retries left: ${retriesLeft}`);",
									"            setTimeout(() => waitForData(retriesLeft - 1), RETRY_INTERVAL);",
									"            }",
									"        }",
									"",
									"        const data = res.json();",
									"        const total = data.hits?.total?.value || 0;",
									"        console.log(`Check: found ${total} docs`);",
									"",
									"        if (total > 0) {",
									"            console.log(\"✅ Index has data, continuing tests...\");",
									"        } else if (retriesLeft > 0) {",
									"            console.log(`⏳ Waiting for data... retries left: ${retriesLeft}`);",
									"            setTimeout(() => waitForData(retriesLeft - 1), RETRY_INTERVAL);",
									"        } else {",
									"            console.warn(\"⚠️ Index still empty after max retries — tests may fail.\");",
									"        }",
									"    });",
									"}",
									"",
									"waitForData(MAX_RETRIES);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"",
									"",
									"pm.test(\"C2723010 legacy_registry index exists\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var resp = pm.response.json();",
									"",
									"pm.test(\"C2723010 equal 100 synchronized products, dev mode, one page\", () => {",
									"    pm.expect(resp.hits.total.value).to.be.equal(100); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{opensearchUrl}}/en-legacy-registry/_search",
							"host": [
								"{{opensearchUrl}}"
							],
							"path": [
								"en-legacy-registry",
								"_search"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "pds web",
			"item": [
				{
					"name": "class eq and lid like",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?q=(product_class eq \"Product_Collection\" and  lid  like \"urn:nasa:pds:insight_*\")&limit=9999&fields=lid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(product_class eq \"Product_Collection\" and  lid  like \"urn:nasa:pds:insight_*\")"
								},
								{
									"key": "limit",
									"value": "9999"
								},
								{
									"key": "fields",
									"value": "lid"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "count having host and target",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?q=(pds:Internal_Reference.pds:lid_reference eq \"urn:nasa:pds:context:instrument_host:spacecraft.insight\" and ref_lid_target eq \"urn:nasa:pds:context:target:planet.mars\")&limit=0&fields=lid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(pds:Internal_Reference.pds:lid_reference eq \"urn:nasa:pds:context:instrument_host:spacecraft.insight\" and ref_lid_target eq \"urn:nasa:pds:context:target:planet.mars\")"
								},
								{
									"key": "limit",
									"value": "0"
								},
								{
									"key": "fields",
									"value": "lid"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "security",
			"item": [
				{
					"name": "unknown query parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(pds:Primary_Result_Summary.pds:processing_level eq \"Derived\")&limit=10&malicious=anything",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(pds:Primary_Result_Summary.pds:processing_level eq \"Derived\")"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "malicious",
									"value": "anything"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "web cache poisoning",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "proxy-connection",
								"value": "something_actually_anything",
								"type": "text"
							},
							{
								"key": "X-forwarded-host",
								"value": "localhost2",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?limit=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "admin",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// console.log(\"Hello\");",
					"// setTimeout(() => {  console.log(\"World!\"); }, 2000);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://registry-api:8080"
		},
		{
			"key": "opensearchUrl",
			"value": "https://elasticsearch:9200",
			"type": "string"
		}
	]
}