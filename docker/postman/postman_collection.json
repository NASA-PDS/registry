{
	"info": {
		"_postman_id": "bcdda625-da14-4466-bec4-3e9bf8c9af6c",
		"name": "Planetary Data System API Reference Tests Copy 3",
		"description": "Federated PDS API which provides actionable end points standardized\nbetween the different nodes.\n\n\nContact Support:\n Email: pds-operator@jpl.nasa.gov",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11337552",
		"_collection_link": "https://interstellar-satellite-406261.postman.co/workspace/My-Workspace~2ee1fece-93c6-4f38-806d-fa321e2e92d5/collection/11337552-bcdda625-da14-4466-bec4-3e9bf8c9af6c?action=share&source=collection_link&creator=11337552"
	},
	"item": [
		{
			"name": "cookbook examples",
			"item": [
				{
					"name": "Latest lidvid for a given lid (no suffix))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488906 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488906 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var product = pm.response.json();",
									"",
									"pm.test(\"C2488906 id is the latest lidvid available\", () => {",
									"    pm.expect(product.id).to.eql(\"urn:nasa:pds:mars2020.spice::3.0\"); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:lid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid"
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Latest lidvid for a given lid (latest suffix)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488906 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488906 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var product = pm.response.json();",
									"",
									"pm.test(\"C2488906 id is the latest lidvid available\", () => {",
									"    pm.expect(product.id).to.eql(\"urn:nasa:pds:mars2020.spice::3.0\"); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:lid/latest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid",
								"latest"
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All lidvid for a given lid (all suffix)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488907 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488907 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488907 3 products are found\", () => {",
									"    pm.expect(data.length).to.equal(3); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:lid/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lid",
								"all"
							],
							"variable": [
								{
									"key": "lid",
									"value": "urn:nasa:pds:mars2020.spice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by processing level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488908 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"C2488908 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488908 Number of results is 10\", () => {",
									"    pm.expect(data.length).to.equal(10); ",
									"});",
									"",
									"pm.test(\"C2488908 processing level is derived\", () => {",
									"    pm.expect(data[0][\"properties\"][\"pds:Primary_Result_Summary.pds:processing_level\"]).to.include(\"Derived\"); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(pds:Primary_Result_Summary.pds:processing_level eq \"Derived\")&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(pds:Primary_Result_Summary.pds:processing_level eq \"Derived\")"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by target",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"C2488910 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"C2488910 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488910 Number of results is 10\", () => {",
									"    pm.expect(data.length).to.equal(10); ",
									"});",
									"",
									"",
									"pm.test(\"C2488910 target is mars\", () => {",
									"    pm.expect(data[0][\"properties\"][\"ref_lid_target\"][0])",
									"    .to.eql(\"urn:nasa:pds:context:target:planet.mars\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(ref_lid_target eq \"urn:nasa:pds:context:target:planet.mars\")&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(ref_lid_target eq \"urn:nasa:pds:context:target:planet.mars\")"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"C2488911 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488911 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"// skip, because of bug https://github.com/NASA-PDS/registry-api/issues/351",
									"/*",
									"pm.test(\"C2488911 3 products are found\", () => {",
									"    pm.expect(data.length).to.equal(3); ",
									"});",
									"*/",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=((pds:Internal_Reference.pds:lid_reference eq \"urn:nasa:pds:context:investigation:mission.mars2020\") or (pds:Internal_Reference.pds:lid_reference like \"urn:nasa:pds:context:investigation:mission.mars2020::*\"))&limit=200",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "((pds:Internal_Reference.pds:lid_reference eq \"urn:nasa:pds:context:investigation:mission.mars2020\") or (pds:Internal_Reference.pds:lid_reference like \"urn:nasa:pds:context:investigation:mission.mars2020::*\"))"
								},
								{
									"key": "limit",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search for collection of an observtional product, kvp response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488912 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488912 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488912 Has pds:Citation_Information.pds:doi\", () => {",
									"    pm.expect(data[0]).to.have.property('pds:Citation_Information.pds:doi');",
									"});",
									"",
									"pm.test(\"C2488912 Collection DOI is [10.17189/1517568]\", () => {",
									"    pm.expect(data[0][\"pds:Citation_Information.pds:doi\"]).to.equal(\"10.17189/1517568\"); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid/member-of?fields=pds:Citation_Information.pds:doi",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid",
								"member-of"
							],
							"query": [
								{
									"key": "fields",
									"value": "pds:Citation_Information.pds:doi"
								}
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:insight_rad:data_calibrated:hp3_rad_cal_00014_20181211_073042::1.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search for a product knowing its DOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2552353 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2552353 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2552353 number of results is 2\", () => {",
									"    pm.expect(data.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"C2488912 product DOI is [10.17189/1517568]\", () => {",
									"    pm.expect(data[0][\"properties\"][\"pds:Citation_Information.pds:doi\"][0]).to.equal(\"10.17189/1517568\"); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?q=(pds:Citation_Information.pds:doi eq \"10.17189/1517568\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(pds:Citation_Information.pds:doi eq \"10.17189/1517568\")"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "requirements",
			"item": [
				{
					"name": "NASA-PDS/pds-api#72 search by a temporal range as an ISO-8601 time interval",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488851 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488851 Number of results is 1\", () => {",
									"    pm.expect(data.length).to.equal(1); ",
									"});",
									"",
									"pm.test(\"C2488851 time found in range\", () => {",
									"    pm.expect(data[0].start_date_time).to.eql(\"2021-03-03T01:36:46.542Z\"); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?=&q=((pds:Time_Coordinates.pds:start_date_time gt \"2021-03-03T01:36:00.000Z\") and (pds:Time_Coordinates.pds:start_date_time lt \"2021-03-03T02:36:46.542Z\"))",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "",
									"value": ""
								},
								{
									"key": "q",
									"value": "((pds:Time_Coordinates.pds:start_date_time gt \"2021-03-03T01:36:00.000Z\") and (pds:Time_Coordinates.pds:start_date_time lt \"2021-03-03T02:36:46.542Z\"))"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/pds-api#99 free text search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488859 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488859 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488859 Number of results is 2\", () => {",
									"    pm.expect(data.length).to.equal(2); ",
									"});",
									"",
									"pm.test(\"C2488859 title contains Perseverance\", () => {",
									"    pm.expect(data[0].title).to.match(/Perseverance/); ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?keywords=Perseverance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "keywords",
									"value": "Perseverance"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#80 select fields in response for lid/lidvid resolution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488846 Response takes less than 1s\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"pm.test(\"C2488846 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488846 Has lid\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('lid');",
									"});",
									"",
									"pm.test(\"C2488846 Has pds:File.pds:file_size\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('pds:File.pds:file_size');",
									"});",
									"",
									"pm.test(\"C2488846 Has not ref_lid_instrument\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.not.have.property('ref_lid_instrument');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid?fields=lid,pds:File.pds:file_size",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"query": [
								{
									"key": "fields",
									"value": "lid,pds:File.pds:file_size"
								}
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:mars2020.spice::1.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry#153 all properties are searchable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488821 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json().data;",
									"",
									"pm.test(\"C2488821 Number of results is 1\", () => {",
									"    pm.expect(data.length).to.equal(1); ",
									"});",
									"",
									"pm.test(\"C2488821 checksum value is 5c955dae449823ffc9e3e1eba1c474de\", () => {",
									"    pm.expect(data[0][\"properties\"][\"ops:Label_File_Info.ops:md5_checksum\"][0]).to.eql(\"5c955dae449823ffc9e3e1eba1c474de\"); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=(ops:Label_File_Info.ops:md5_checksum eq \"5c955dae449823ffc9e3e1eba1c474de\")",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "(ops:Label_File_Info.ops:md5_checksum eq \"5c955dae449823ffc9e3e1eba1c474de\")"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#349 Request for json+pds4 response fails in production",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.nasa.pds.pds4+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#336 As a PDS operator, I want to know the health of the registry API service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/healthcheck",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"healthcheck"
							]
						}
					},
					"response": []
				},
                {
					"name": "NASA-PDS/registry-api/352 pagination step 1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sort=ops:Harvest_Info.ops:harvest_date_time&limit=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api/352 pagination step 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sort=ops:Harvest_Info.ops:harvest_date_time&limit=2&search-after=2024-01-23T22:53:30.402453Z",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time"
								},
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "search-after",
									"value": "2024-01-23T22:53:30.402453Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api/352 members pagination step 1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:insight_rad:data_calibrated::7.0/members?sort=ops:Harvest_Info.ops:harvest_date_time&limit=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:insight_rad:data_calibrated::7.0",
								"members"
							],
							"query": [
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api/352 members pagination step 2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:insight_rad:data_calibrated::7.0/members?sort=ops:Harvest_Info.ops:harvest_date_time&limit=2&search-after=2024-01-23T22:53:30.402453Z",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:insight_rad:data_calibrated::7.0",
								"members"
							],
							"query": [
								{
									"key": "sort",
									"value": "ops:Harvest_Info.ops:harvest_date_time"
								},
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "search-after",
									"value": "2024-01-23T22:53:30.402453Z"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "other tickets",
			"item": [
				{
					"name": "NASA-PDS/registry-api#277 /properties endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488844 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488844 Response takes less than 100ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"pm.test(\"C2488844 Response contains same number of properties\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.length).to.be.eql(143);",
									"});",
									"",
									"pm.test(\"C2488844 Response property objects follow expected schema\", () => {",
									"    const responseJson = pm.response.json();",
									"    const expectedKeys = new Set([\"property\", \"type\"]);",
									"    for (const propertyObj of responseJson) {",
									"        const keys = new Set(Object.keys(propertyObj));",
									"        pm.expect(Array.from(keys).every(key => expectedKeys.has(key)) && Array.from(expectedKeys).every(key => keys.has(key))).true;",
									"    }",
									"});",
									"",
									"// Some additional tests may be warranted in future based on presence of particular keys, key formats, or types."
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#326 list product classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2488845 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2488845 Returns correct values\", () => {",
									"    const responseJson = pm.response.json();",
									"    const values = new Set(responseJson);",
									"    const expectedValues = new Set([\"any\",\"bundles\",\"collections\",\"documents\",\"observationals\"]);",
									"    pm.expect(Array.from(values).every(val => expectedValues.has(val)) && Array.from(expectedValues).every(val => values.has(val))).true;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/classes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"classes"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#375 csv response, use | as inner list separator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2723037 Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"C2723037 Response takes less than 100ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"var resp = pm.response.json();",
									"",
									"pm.test(\"C2723037 file size value doesn't have brackets\", () => {",
									"    pm.expect(resp[\"pds:File.pds:file_size\"]).to.equal(\"1365\"); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/kvp+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:lidvid?fields=lid,pds:File.pds:file_size",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":lidvid"
							],
							"query": [
								{
									"key": "fields",
									"value": "lid,pds:File.pds:file_size"
								}
							],
							"variable": [
								{
									"key": "lidvid",
									"value": "urn:nasa:pds:mars2020.spice::1.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#296 API crashes with JVM memory error on data sets with very large labels (>1MB)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const numOfRequests = 20",
									"",
									"for (let i = 0; i < numOfRequests; i++) {",
									"    let query = i + 1",
									"    pm.test(\"Query \" + query + \": status code is 200\", () => {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?q=lidvid%20like%20%22urn:nasa:pds:mars2020_sherloc*%22",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "lidvid%20like%20%22urn:nasa:pds:mars2020_sherloc*%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#356 Accept:* response not defaulting to valid application/json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type should be 'application/json'\", () => {",
									"    let expectedContentType = \"application/json\";",
									"    let actualContentType = pm.response.headers.get(\"Content-Type\");",
									"    pm.expect(actualContentType).to.include(expectedContentType);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice::1.0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice::1.0"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#262 the request url in the error message does not make sense",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/classes//collections?q=\"\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"classes",
								"",
								"collections"
							],
							"query": [
								{
									"key": "q",
									"value": "\"\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#341 members of a bundle does not work on new test dataset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice::3.0/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice::3.0",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#355 api does not return information that OpenSearch says is public",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#343 API falsely reports 10000 hits for hits>10000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Hits are less than 10,000\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.hits).to.be.below(10000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?limit=100&q=product_class%20eq%20\"Product_Observational\"&start=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "q",
									"value": "product_class%20eq%20\"Product_Observational\""
								},
								{
									"key": "start",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#223 products/{id}/members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UUID-TBD Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"pm.test(\"UUID-TBD Correct hits returned\", () => {pm.expect(content.summary.hits).to.eql(1)});",
									"pm.test(\"UUID-TBD Correct data returned\", () => {pm.expect(content.data[0].id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels::3.0\")});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#453 products/{id}/members/members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UUID-TBD Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"pm.test(\"UUID-TBD Correct hits returned\", () => {pm.expect(content.summary.hits).to.eql(11)});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice/members/members",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice",
								"members",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#451/452 products/{id}/member-of",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UUID-TBD Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"pm.test(\"UUID-TBD Correct hits returned\", () => {pm.expect(content.summary.hits).to.eql(1)});",
									"pm.test(\"UUID-TBD Correct data returned\", () => {pm.expect(content.data[0].id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels::3.0\")});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice:spice_kernels:sclk_m2020_168_sclkscet_refit_v01.tsc::1.0/member-of",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice:spice_kernels:sclk_m2020_168_sclkscet_refit_v01.tsc::1.0",
								"member-of"
							]
						}
					},
					"response": []
				},
				{
					"name": "NASA-PDS/registry-api#454 products/{id}/member-of/member-of",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UUID-TBD Status code is 200\", () => {pm.response.to.have.status(200)});",
									"const content = pm.response.json();",
									"pm.test(\"UUID-TBD Correct hits returned\", () => {pm.expect(content.summary.hits).to.eql(1)});",
									"pm.test(\"UUID-TBD Correct data returned\", () => {pm.expect(content.data[0].id).to.eql(\"urn:nasa:pds:mars2020.spice:spice_kernels::3.0\")});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/urn:nasa:pds:mars2020.spice:spice_kernels:sclk_m2020_168_sclkscet_refit_v01.tsc::1.0/member-of",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"urn:nasa:pds:mars2020.spice:spice_kernels:sclk_m2020_168_sclkscet_refit_v01.tsc::1.0",
								"member-of"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "opensearch requests",
			"item": [
				{
					"name": "legacy_registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"C2723010 legacy_registry index exists\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var resp = pm.response.json();",
									"",
									"pm.test(\"C2723010 more than 10000 synchronized products\", () => {",
									"    pm.expect(resp.hits.total.value).to.eql(10000); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{opensearchUrl}}/legacy_registry/_search",
							"host": [
								"{{opensearchUrl}}"
							],
							"path": [
								"legacy_registry",
								"_search"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// console.log(\"Hello\");",
					"// setTimeout(() => {  console.log(\"World!\"); }, 2000);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://registry-api:8080"
		},
		{
			"key": "opensearchUrl",
			"value": "https://elasticsearch:9200",
			"type": "string"
		}
	]
}
